Интернет-магазин

Примерный список обозримых задач
	БД - паттерн репозиторий (сохранение по методу commit())
		Проверка наличия БД
		Создание БД
		Считывание БД в локальные таблицы
			Таблицы представлены как List<Class>
		Сохранение данных при выходе
		Поддержка версий, конвертация при старте?
	Вход
		Сборка экрана входа (логин, пароль, вход, регистрация)
		Обращение к БД по пользовательским данным
	Регистрация
		Сборка экрана регистрации (логин, пароль, имя, фамилия, телефон ...)
		Проверка правильности ввода
		Возврат на экран входа
	Note: Корзина - List<Item>
		Экран со списком товаров.
		Кнопка удалить
		Изменение количества
		Возврат на главный экран
		Кнопка оплата, либо наличными в магазине
		Поддержка сохранения способа платежа?
	Главный экран пользователя и админа - каталог товаров
		Показывать список товаров		
		Если пользователь
			Кнопка добавить в корзину
			Переход в корзину
		Если админ - кнопка добавить товар в конце
		Переход в список заказов (!показывать только свои)
	Экран список заказов
		fillFor(userRole)
	Главный экран кладовщика - список заказов.
		Открытие заказа в виде списка товаров с CheckBox
		Перевод заказа в состояние "Готов"
		Если товар оплачен
	Главный экран продавца - список заказов.
		Открытие информации о заказе
		Завершение заказа

Техническая информация

Список объектов (User, ShopItem, ShopStorage, ShopEntity, Order)
Экраны (Регистрация, Вход, Список товаров (ShopStorage), Список заказов (Order))

БД - File (Encoding?)
UI - FXML
IDE - Idea
Git - github.com

Assume:
	!Main ShopStorage has id = 0

ТЗ на ближайшее время - 
	Согласовать интерфейс
	Согласовать роли
	Согласовать цену
	Согласовать сроки
	---
	//Создать репозиторий
	//Конвертировать ТЗ в Readme.md
	//Создать проект
	//Продумать БД
	Создать БД
	Создать класс-оболочку над БД
	Протестировать основные методы через консоль (как создать админа при шифровке?)
	Подключить UI библиотеки
	Сверстать вход
	Сверстать регистрацию
	Сверстать список товаров
	Сверстать список заказов
	...

